[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://materials/items_atlas.tres" type="Texture" id=1]

[sub_resource type="Shader" id=6]
code = "shader_type spatial;
render_mode unshaded;

uniform bool marked = true;
uniform sampler2D albedo;
uniform sampler2D rainbow_noise;
uniform vec2 rainbow_direction = vec2(1, -1);
uniform float rainbow_speed = 1.0;

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {
	vec4 color = texture(albedo, UV.xy);
	if (marked) {
		float rainbow = texture(rainbow_noise, UV.xy + TIME * normalize(rainbow_direction) * rainbow_speed).x;
		color.xyz *= hsv2rgb(vec3(rainbow, 1.0, 1.0));
	}

	ALBEDO = color.rgb;
	ALPHA = color.a;
}"

[sub_resource type="OpenSimplexNoise" id=8]
persistence = 0.246
lacunarity = 2.03

[sub_resource type="NoiseTexture" id=9]
seamless = true
noise = SubResource( 8 )

[resource]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/marked = false
shader_param/rainbow_direction = Vector2( 1, -1 )
shader_param/rainbow_speed = 0.1
shader_param/albedo = ExtResource( 1 )
shader_param/rainbow_noise = SubResource( 9 )
