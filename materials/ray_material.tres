[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform bool marked = false;

uniform vec4 base_color : hint_color = vec4(1.0, 1.0, 1.0, 0.1);

uniform sampler2D rainbow_noise;
uniform vec2 rainbow_direction = vec2(1, -1);
uniform float rainbow_speed = 1.0;

uniform vec2 scale;
uniform float zoom;
uniform float speed = 1.0;

uniform vec2 refraction_stretch = vec2(2.0, 0.8);
uniform float refraction_strength : hint_range(0.0, 0.1) = 0.02;
uniform float ray_length = 1.0;

uniform sampler2D noise;

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {	
	float color = texture(noise, vec2(UV.x, UV.y + -TIME * speed * 0.5) * scale * refraction_stretch).x;

	float distance_from_start = UV.y * ray_length;
	float distance_to_end = ray_length - UV.y * ray_length;

	if (distance_from_start < 1.0) {
		color *= distance_from_start;
	}
	
	if (UV.x < 0.1) {
		color *= (0.1 - UV.x) / 0.1;
	} else if (UV.x > 0.9) {
		color *= (1.0 - UV.x) / 0.1;
	}

	if (color < 0.5) {
		discard;
	}
	
	vec3 result_color = base_color.rgb;
	if (marked) {
		float rainbow = texture(rainbow_noise, UV.xy + TIME * normalize(rainbow_direction) * rainbow_speed).x;
		result_color = hsv2rgb(vec3(rainbow, 1.0, 1.0)) * color;
	} else {
		result_color = base_color.xyz * color;
	}

	ALBEDO = result_color;
	EMISSION = result_color;
	
	DEPTH = 0.0;
}
"

[sub_resource type="OpenSimplexNoise" id=3]
octaves = 4
period = 11.8
persistence = 0.268
lacunarity = 1.62

[sub_resource type="NoiseTexture" id=2]
seamless = true
noise = SubResource( 3 )

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[resource]
render_priority = 10
shader = SubResource( 1 )
shader_param/marked = true
shader_param/base_color = Color( 1, 0, 0, 0.101961 )
shader_param/rainbow_direction = Vector2( 1, -1 )
shader_param/rainbow_speed = 1.0
shader_param/scale = Vector2( 2, 1 )
shader_param/zoom = 0.2
shader_param/speed = 1.0
shader_param/refraction_stretch = Vector2( 1, 1 )
shader_param/refraction_strength = 0.1
shader_param/ray_length = 1.0
shader_param/rainbow_noise = SubResource( 5 )
shader_param/noise = SubResource( 2 )
