[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform vec4 base_color : hint_color = vec4(1.0, 1.0, 1.0, 0.1);
uniform vec4 emission : hint_color = vec4(0.1, 0.0, 0.0, 0);

uniform vec2 scale;
uniform float zoom;
uniform float speed = 1.0;

uniform vec2 refraction_stretch = vec2(2.0, 0.8);
uniform float refraction_strength : hint_range(0.0, 0.1) = 0.02;
uniform float ray_length = 1.0;

uniform sampler2D noise;

void fragment() {	
	float color = texture(noise, vec2(UV.x, UV.y + -TIME * speed * 0.5) * scale * refraction_stretch).x;

	float distance_from_start = UV.y * ray_length;
	float distance_to_end = ray_length - UV.y * ray_length;
	if (distance_to_end < 1.0) {
		color *= (ray_length - distance_to_end) / ray_length;
	} else if (distance_from_start < 1.0) {
		color *= distance_from_start;
	}
	
	if (UV.x < 0.1) {
		color *= (0.1 - UV.x) / 0.1;
	} else if (UV.x > 0.9) {
		color *= (1.0 - UV.x) / 0.1;
	}

	if (color < 0.5) {
		discard;
	}
	
	EMISSION.x = color;

	ALBEDO = base_color.xyz * color;
	DEPTH = 0.0;
}"

[sub_resource type="OpenSimplexNoise" id=3]
octaves = 4
period = 11.8
persistence = 0.268
lacunarity = 1.62

[sub_resource type="NoiseTexture" id=2]
seamless = true
noise = SubResource( 3 )

[resource]
render_priority = 10
shader = SubResource( 1 )
shader_param/base_color = Color( 0, 0, 0, 1 )
shader_param/emission = Color( 0.517647, 0.0313726, 0.0509804, 0 )
shader_param/scale = Vector2( 2, 1 )
shader_param/zoom = 0.2
shader_param/speed = 1.0
shader_param/refraction_stretch = Vector2( 1, 1 )
shader_param/refraction_strength = 0.1
shader_param/ray_length = 1.0
shader_param/noise = SubResource( 2 )
